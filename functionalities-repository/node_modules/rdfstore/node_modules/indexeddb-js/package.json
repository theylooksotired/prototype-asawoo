{
  "name": "indexeddb-js",
  "description": "A pure javascript stop-gap implementation of the IndexedDB (aka. Indexed Database) API using sqlite3 as a storage engine.",
  "version": "0.0.14",
  "main": "src/indexeddb-js.js",
  "author": {
    "name": "metagriffin",
    "email": "mg.npmjs@uberdev.org"
  },
  "homepage": "https://github.com/metagriffin/indexeddb-js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/metagriffin/indexeddb-js.git"
  },
  "bugs": {
    "url": "https://github.com/metagriffin/indexeddb-js/issues"
  },
  "dependencies": {
    "amdefine": ">=0.0.4",
    "sqlite3": ">=2.1.1",
    "underscore": ">=1.4.2"
  },
  "devDependencies": {
    "jasmine-node": ">=1.0.26"
  },
  "keywords": [
    "indexeddb",
    "javascript",
    "sqlite3",
    "unit testing"
  ],
  "readme": "indexeddb-js\n============\n\nWelcome to the `indexeddb-js` javascript/node-js module: a\npure-javascript stop-gap implementation of the IndexedDB (aka. Indexed\nDatabase) API. Being \"stop-gap\", it currently does not implement all\nIndexedDB API features and can only use\n[sqlite3](https://npmjs.org/package/sqlite3) as a data storage\nback-end.\n\nJust To Be Clear\n================\n\nThis module is not intended to provide a \"production\" level\nimplementation: it is a \"stop-gap\" measure while we (the community)\nwait for a more robust/native implementation for node-js. As such, it\nwas created to allow unit-testing of other projects (such as\n[syncml-js](https://npmjs.org/package/syncml-js) and others), which\nrequire that you provide access to an indexedDB API, but need to be\nunit-tested in any environment, including non-browser environments.\n\nIf time permits, and/or others are willing to contribute, it may\none day graduate to a less \"stop-gap\" measure.\n\nWhat Isn't Implemented\n======================\n\nThere are many IndexedDB API items that are not implemented, which\ninclude but are not limited to:\n\n* True transaction support, i.e. transaction isolation, aborting\n  (rollback), and transaction events (oncomplete).\n\n* Proper meta-information upgrade management.\n\n* Many of the dynamic public API properties of various object types.\n\n* Compliance with any of the DOMException errors.\n\n* Many non-critical APIs, including:\n\n    * indexedDB.deleteDatabase()\n    * indexedDB.cmp()\n    * Transaction.abort()\n    * Store.deleteIndex()\n    * Cursor.update()\n    * Cursor.advance()\n    * Cursor.delete()\n\n* Performance and efficiency (it was implemented one Saturday\n  afternoon).\n\n* Non-sqlite3 data stores.\n\nInstallation\n============\n\nThis is the easy part, provided you have ``npm`` installed:\n\n    npm install indexeddb-js sqlite3\n\nUsage\n=====\n\nA quick example of how to use `indexeddb-js`:\n\n``` js\n\n// assuming modules 'sqlite3' and 'indexeddb-js' have been loaded\n// in your environment-specific way, e.g. with `define` or `require`.\n\n// of course, if you are being nice to the community, you would wrap the\n// following in a call to \"define()\" and would share your code as a\n// non-environment-specific javascript module.  see\n//   http://manuel.kiessling.net/2012/03/30/true-universal-javascript-modules-with-write-once-run-anywhere-jasmine-specs/\n// for details... ;-)\n\nvar engine    = new sqlite3.Database(':memory:');\nvar scope     = indexeddbjs.makeScope('sqlite3', engine);\nvar request   = scope.indexedDB.open('MyDatabase');\nvar db        = null;\n\nrequest.onerror = function(event) {\n  console.log('ERROR: could not open database: ' + event.target.error);\n};\n\nrequest.onupgradeneeded = function(event) {\n  db = event.target.result;\n  var store = db.createObjectStore('data', {keyPath: 'id'});\n  store.createIndex('value', 'value', {unique: false});\n  store.add({id: 1, value: 'my-first-item'});\n};\n\nrequest.onsuccess = function(event) {\n  db = event.target.result;\n  request.run();\n};\n\nrequest.run = function() {\n\n  // register an error handler for any error on the current db\n  db.onerror = function(event) {\n    console.log('DATABASE ERROR: ' + event.target.error);\n  };\n\n  // fetch the record with id \"1\" in store \"data\"\n  var store = db.transaction(null, 'readwrite').objectStore('data');\n  store.get('1').onsuccess = function(event) {\n    var obj = event.target.result;\n    console.log('record: ' + JSON.stringify(obj));\n\n    // now delete it\n    store.delete('1').onsuccess = function(event) {\n      console.log('deleted the record');\n\n      // and now add a couple new records (overwriting it if the key\n      // already exists) with the same 'value' (so we can play with cursors)\n      store.put({id: '2', value: 'another object'}).onsuccess = function(event) {\n        store.put({id: 3, value: 'another object'}).onsuccess = function(event) {\n          console.log('added two more records');\n\n          // we're getting pretty deeply nested here... let's pop out\n          // and use the index\n          play_with_the_index_and_cursors();\n\n        };\n      };\n    };\n  };\n\n  var play_with_the_index_and_cursors = function() {\n\n    var index = db.transaction(null, 'readwrite').objectStore('data').index('value');\n    var range = scope.IDBKeyRange.only('another object');\n\n    console.log('all objects with the \"value\" field set to \"another object\":');\n\n    index.openCursor(range).onsuccess = function(event) {\n      var cursor = event.target.result;\n      if ( ! cursor )\n        return;\n      console.log('  - ' + JSON.stringify(cursor.value));\n      cursor.continue();\n    };\n\n  };\n\n};\n```\n\nThe output on the console from the above script should be:\n\n    record: {\"id\":1,\"value\":\"my-first-item\"}\n    deleted the record\n    added two more records\n    all objects with the \"value\" field set to \"another object\":\n      - {\"id\":\"2\",\"value\":\"another object\"}\n      - {\"id\":3,\"value\":\"another object\"}\n\nNote that `indexeddb-js` implements the Indexed Database API as\naccurately as possible, so just\n[google](http://lmgtfy.com/?q=indexeddb) for the specification and\nmany good tutorials. My favorite:\n\n* https://developer.mozilla.org/en-US/docs/IndexedDB/Using_IndexedDB\n\nTests\n=====\n\n`indexeddb-js` uses [jasmine](http://pivotal.github.com/jasmine/) for\nthe testing infrastructure; in the indexeddb-js directory:\n\n    npm install jasmine-node\n    make tests\n",
  "readmeFilename": "README.md",
  "_id": "indexeddb-js@0.0.14",
  "_from": "indexeddb-js@0.0.14"
}
